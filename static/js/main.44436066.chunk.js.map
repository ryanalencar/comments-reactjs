{"version":3,"sources":["Comment.js","Comments.js","NewComment.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Comment","c","comment","Comments","comments","keys","Object","map","key","NewComment","state","newComments","handleChange","e","setState","target","value","console","log","sendComment","props","this","onChange","onClick","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","App","isLoading","ref","child","push","update","on","snapshot","val","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wNAQeA,EANC,SAAC,GAAW,IAATC,EAAQ,EAARA,EACf,OACI,yCAAeA,EAAEC,UCUVC,EAXE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAOC,OAAOD,KAAKD,GACzB,OACI,6BAEKC,EAAKE,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAASP,EAAGG,EAASI,UCqBnCC,E,2MA1BXC,MAAQ,CACJC,YAAa,I,EAEjBC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,YAAaE,EAAEE,OAAOC,QAE1BC,QAAQC,IAAIL,EAAEE,OAAOC,Q,EAGzBG,YAAc,WACV,EAAKC,MAAMD,YAAY,EAAKT,MAAMC,aAClC,EAAKG,SAAS,CACVH,YAAa,M,wEAIjB,OACI,6BACI,8BAAUK,MAAOK,KAAKX,MAAMC,YAAaW,SAAUD,KAAKT,eACxD,4BAAQW,QAASF,KAAKF,aAAtB,e,GArBSK,a,sBCazBC,IAASC,cAZc,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMZ,IAAMC,EAAWV,IAASU,WC6BlBC,E,2MAvCb1B,MAAQ,CACNN,SAAU,GACViC,WAAW,G,EAGblB,YAAc,SAAAjB,GACZ,IACME,EAAW,GACjBA,EAAS,YAFE+B,EAASG,MAAMC,MAAM,YAAYC,OAAOhC,KAEtB,CAC3BN,WAGFiC,EAASG,MAAMG,OAAOrC,I,mFAGH,IAAD,OAClBiB,KAAKP,SAAS,CAAEuB,WAAW,IAC3BhB,KAAKjB,SAAW+B,EAASG,IAAI,YAC7BjB,KAAKjB,SAASsC,GAAG,SAAS,SAAAC,GACxB,EAAK7B,SAAS,CACZV,SAAUuC,EAASC,MACnBP,WAAW,S,+BAMf,OACE,yBAAKQ,UAAU,IACb,kBAAC,EAAD,CAAY1B,YAAaE,KAAKF,YAAaR,YAAaU,KAAKX,MAAMC,cACnE,kBAAC,EAAD,CAAUP,SAAUiB,KAAKX,MAAMN,WAE7BiB,KAAKX,MAAM2B,WAAa,iD,GAjChBb,aCMEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.44436066.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Comment = ({ c }) => {\r\n    return (\r\n        <div>Comment: {c.comment}</div>\r\n    )\r\n}\r\n\r\nexport default Comment","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nconst Comments = ({ comments }) => {\r\n    const keys = Object.keys(comments);\r\n    return (\r\n        <div>\r\n            {/* Comment */}\r\n            {keys.map(key => <Comment c={comments[key]} />)}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Comments","import React, { Component } from 'react'\r\n\r\nclass NewComment extends Component {\r\n    state = {\r\n        newComments: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            newComments: e.target.value\r\n        })\r\n        console.log(e.target.value)\r\n    }\r\n\r\n    sendComment = () => {\r\n        this.props.sendComment(this.state.newComments)\r\n        this.setState({\r\n            newComments: ''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <textarea value={this.state.newComments} onChange={this.handleChange}></textarea>\r\n                <button onClick={this.sendComment}>Enviar</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewComment","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCl_gXoAcO_nDVOs5LsfSS59vwD8hEo58Q\",\r\n    authDomain: \"comments-react-53132.firebaseapp.com\",\r\n    databaseURL: \"https://comments-react-53132.firebaseio.com\",\r\n    projectId: \"comments-react-53132\",\r\n    storageBucket: \"comments-react-53132.appspot.com\",\r\n    messagingSenderId: \"155358327450\",\r\n    appId: \"1:155358327450:web:e2dde1b8d57cfd14586523\",\r\n    measurementId: \"G-CHLPW5VSTY\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const database = firebase.database();","import React, { Component } from 'react'\nimport Comments from './Comments'\nimport NewComment from './NewComment'\n\nimport { database } from './firebase'\n\nclass App extends Component {\n  state = {\n    comments: {},\n    isLoading: false\n  }\n\n  sendComment = comment => {\n    const id = database.ref().child('comments').push().key\n    const comments = {}\n    comments['comments/' + id] = {\n      comment\n    }\n    \n    database.ref().update(comments)\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true })\n    this.comments = database.ref('comments')\n    this.comments.on('value', snapshot => {\n      this.setState({\n        comments: snapshot.val(),\n        isLoading: false\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"\">\n        <NewComment sendComment={this.sendComment} newComments={this.state.newComments} />\n        <Comments comments={this.state.comments} />\n        {\n          this.state.isLoading && <p>Carregando...</p>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}